import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, Bot, User } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

const botResponses = {
  greeting: [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ R_Potolki. –ö–∞–∫ –¥–µ–ª–∞ —Å –ø–æ—Ç–æ–ª–∫–∞–º–∏? üòä",
    "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞!",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–∞—Ö?"
  ],
  price: [
    "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏, —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂–∞. –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –æ—Ç 800‚ÇΩ/–º¬≤. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!",
    "–¶–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 800‚ÇΩ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä."
  ],
  materials: [
    "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π: –º–∞—Ç–æ–≤—ã–µ, –≥–ª—è–Ω—Ü–µ–≤—ã–µ, —Å–∞—Ç–∏–Ω–æ–≤—ã–µ –∏ —Ç–∫–∞–Ω–µ–≤—ã–µ –ø–æ—Ç–æ–ª–∫–∏. –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã.",
    "–í –Ω–∞—à–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ: –º–∞—Ç–æ–≤—ã–µ –ø–æ—Ç–æ–ª–∫–∏ (–∫–ª–∞—Å—Å–∏–∫–∞), –≥–ª—è–Ω—Ü–µ–≤—ã–µ (–≤–∏–∑—É–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ), —Å–∞—Ç–∏–Ω–æ–≤—ã–µ (—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±–ª–µ—Å–∫) –∏ —Ç–∫–∞–Ω–µ–≤—ã–µ (–ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å)."
  ],
  installation: [
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1 –¥–µ–Ω—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã. –†–∞–±–æ—Ç–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∑–∞—â–∏—â–∞–µ–º –º–µ–±–µ–ª—å, —É–±–∏—Ä–∞–µ–º –∑–∞ —Å–æ–±–æ–π. –ù–∏–∫–∞–∫–æ–π –ø—ã–ª–∏ –∏ –≥—Ä—è–∑–∏!",
    "–ú–æ–Ω—Ç–∞–∂ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ 3-6 —á–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ú–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏–µ–∑–∂–∞—é—Ç —Å–æ –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º."
  ],
  warranty: [
    "–î–∞–µ–º 10 –ª–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–±–æ—Ç—ã! –≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ. –ó–∞ 8 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è.",
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 10 –ª–µ—Ç –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ: –ø—Ä–æ–≤–∏—Å–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞, –¥–µ—Ñ–µ–∫—Ç—ã –º–æ–Ω—Ç–∞–∂–∞. –ú—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ!"
  ],
  lighting: [
    "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Å–≤–µ—â–µ–Ω–∏—è: —Ç–æ—á–µ—á–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏, LED-–ª–µ–Ω—Ç—ã, –∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –ª—é—Å—Ç—Ä, —Å–ª–æ–∂–Ω—ã–µ —Å–≤–µ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏. –í—Å–µ –ø—Ä–æ–¥—É–º—ã–≤–∞–µ–º –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
    "–û—Å–≤–µ—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ—á–µ—á–Ω—ã—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å –¥–∏–º–º–µ—Ä–∞–º–∏ –∏ —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π."
  ],
  contact: [
    "–ó–≤–æ–Ω–∏—Ç–µ: +7 (999) 123-45-67 –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ. –í—ã–µ–∑–¥ –∑–∞–º–µ—Ä—â–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π! –†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00.",
    "–î–ª—è –∑–∞–∫–∞–∑–∞ –∑–∞–º–µ—Ä–∞: —Ç–µ–ª–µ—Ñ–æ–Ω +7 (999) 123-45-67 –∏–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ. –ó–∞–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, —Ä–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ."
  ],
  default: [
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –õ—É—á—à–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –ó–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (999) 123-45-67",
    "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏. –û–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ª—É—á—à–µ –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Ç –≤–∞—Å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –ø—Ä–∏ –≤—ã–µ–∑–¥–µ –Ω–∞ –∑–∞–º–µ—Ä."
  ]
};

const quickReplies = [
  { text: "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", key: "price" },
  { text: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", key: "materials" },
  { text: "–°—Ä–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", key: "installation" },
  { text: "–ì–∞—Ä–∞–Ω—Ç–∏—è", key: "warranty" },
  { text: "–û—Å–≤–µ—â–µ–Ω–∏–µ", key: "lighting" },
  { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", key: "contact" }
];

export function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      addBotMessage(getRandomResponse('greeting'));
    }
  }, [isOpen]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const getRandomResponse = (category: keyof typeof botResponses): string => {
    const responses = botResponses[category];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const addBotMessage = (text: string) => {
    const message: Message = {
      id: Date.now().toString(),
      text,
      isBot: true,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const addUserMessage = (text: string) => {
    const message: Message = {
      id: Date.now().toString(),
      text,
      isBot: false,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('—Ü–µ–Ω–∞') || message.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || message.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return getRandomResponse('price');
    }
    if (message.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || message.includes('—Ñ–∞–∫—Ç—É—Ä–∞') || message.includes('–≥–ª—è–Ω–µ—Ü') || message.includes('–º–∞—Ç–æ–≤')) {
      return getRandomResponse('materials');
    }
    if (message.includes('—É—Å—Ç–∞–Ω–æ–≤') || message.includes('–º–æ–Ω—Ç–∞–∂') || message.includes('—Å—Ä–æ–∫')) {
      return getRandomResponse('installation');
    }
    if (message.includes('–≥–∞—Ä–∞–Ω—Ç') || message.includes('–∫–∞—á–µ—Å—Ç–≤')) {
      return getRandomResponse('warranty');
    }
    if (message.includes('—Å–≤–µ—Ç') || message.includes('–æ—Å–≤–µ—â') || message.includes('–ª–∞–º–ø–∞') || message.includes('–ª—é—Å—Ç—Ä–∞')) {
      return getRandomResponse('lighting');
    }
    if (message.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || message.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || message.includes('—Å–≤—è–∑') || message.includes('–∑–≤–æ–Ω')) {
      return getRandomResponse('contact');
    }
    if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤') || message.includes('–¥–æ–±—Ä')) {
      return getRandomResponse('greeting');
    }
    
    return getRandomResponse('default');
  };

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    addUserMessage(inputText);
    setInputText('');
    setIsTyping(true);

    setTimeout(() => {
      const response = getBotResponse(inputText);
      addBotMessage(response);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickReply = (key: string) => {
    const quickReply = quickReplies.find(q => q.key === key);
    if (quickReply) {
      addUserMessage(quickReply.text);
      setIsTyping(true);

      setTimeout(() => {
        const response = getRandomResponse(key as keyof typeof botResponses);
        addBotMessage(response);
        setIsTyping(false);
      }, 1000);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Chat Button */}
      <button
        onClick={() => setIsOpen(true)}
        className={`fixed bottom-6 right-6 z-40 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white p-4 rounded-full shadow-2xl transition-all duration-300 hover:scale-110 ${
          isOpen ? 'hidden' : 'block'
        }`}
      >
        <MessageCircle className="w-6 h-6" />
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 z-50 w-96 h-[600px] bg-white rounded-3xl shadow-2xl flex flex-col overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                <Bot className="w-6 h-6" />
              </div>
              <div>
                <h3 className="font-bold">–ü–æ–º–æ—â–Ω–∏–∫ R_Potolki</h3>
                <p className="text-sm text-blue-100">–û–Ω–ª–∞–π–Ω</p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white/80 hover:text-white p-1"
            >
              <X className="w-6 h-6" />
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
              >
                <div className={`flex items-start gap-2 max-w-[80%] ${message.isBot ? '' : 'flex-row-reverse'}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.isBot 
                      ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white' 
                      : 'bg-gray-300 text-gray-600'
                  }`}>
                    {message.isBot ? <Bot className="w-4 h-4" /> : <User className="w-4 h-4" />}
                  </div>
                  <div className={`p-3 rounded-2xl ${
                    message.isBot 
                      ? 'bg-gray-100 text-gray-800' 
                      : 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white'
                  }`}>
                    <p className="text-sm leading-relaxed">{message.text}</p>
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-start gap-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <div className="bg-gray-100 p-3 rounded-2xl">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Quick Replies */}
          {messages.length <= 2 && (
            <div className="p-4 border-t border-gray-100">
              <p className="text-xs text-gray-500 mb-3">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
              <div className="flex flex-wrap gap-2">
                {quickReplies.slice(0, 3).map((reply) => (
                  <button
                    key={reply.key}
                    onClick={() => handleQuickReply(reply.key)}
                    className="px-3 py-1 bg-blue-50 text-blue-600 rounded-full text-xs hover:bg-blue-100 transition-colors"
                  >
                    {reply.text}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-4 border-t border-gray-100">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-blue-500"
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputText.trim()}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed text-white p-2 rounded-full transition-all duration-300"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}